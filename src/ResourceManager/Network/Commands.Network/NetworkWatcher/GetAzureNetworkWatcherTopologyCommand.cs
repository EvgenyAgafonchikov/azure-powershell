// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using Microsoft.Azure.Commands.Network.Models;
using Microsoft.Azure.Management.Network;
using Microsoft.Azure.Management.Network.Models;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;
using AutoMapper;
using CNM = Microsoft.Azure.Commands.Network.Models;

namespace Microsoft.Azure.Commands.Network
{
    [Cmdlet(VerbsCommon.Get, "AzureRmNetworkWatcherTopology", DefaultParameterSetName = "SetByResource"), OutputType(typeof(PSTopology))]
    public partial class GetAzureRmNetworkWatcherTopology : NetworkBaseCmdlet
    {
        [Parameter(
            Mandatory = true,
            HelpMessage = "The resource group name of network watcher.",
            ParameterSetName = "SetByName",
            ValueFromPipelineByPropertyName = true)]
        [ValidateNotNullOrEmpty]
        public string ResourceGroupName { get; set; }

        [Alias("ResourceName", "Name")]
        [Parameter(
            Mandatory = true,
            HelpMessage = "The network watcher name of network watcher.",
            ParameterSetName = "SetByName",
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        [ValidateNotNullOrEmpty]
        public string NetworkWatcherName { get; set; }

        [Parameter(
            Mandatory = false,
            HelpMessage = "The name of the target resource group to perform topology on.",
            ValueFromPipelineByPropertyName = true)]
        public string TargetResourceGroupName { get; set; }

        [Parameter(
            Mandatory = false,
            HelpMessage = "The reference of the Virtual Network resource.",
            ValueFromPipelineByPropertyName = true)]
        public string TargetVirtualNetworkId { get; set; }

        [Parameter(
            Mandatory = false,
            HelpMessage = "The reference of the Subnet resource.",
            ValueFromPipelineByPropertyName = true)]
        public string TargetSubnetId { get; set; }

        [Parameter(
            Mandatory = true,
            ValueFromPipeline = true,
            HelpMessage = "The NetworkWatcher Resource.",
            ParameterSetName = "SetByResource")]
        public PSNetworkWatcher NetworkWatcher { get; set; }

        public override void Execute()
        {
            base.Execute();

            // TargetVirtualNetwork
            SubResource vTargetVirtualNetwork = null;

            // TargetSubnet
            SubResource vTargetSubnet = null;

            if (this.TargetVirtualNetworkId != null)
            {
                // TargetVirtualNetwork
                if (vTargetVirtualNetwork == null)
                {
                    vTargetVirtualNetwork = new SubResource();
                }
                vTargetVirtualNetwork.Id = this.TargetVirtualNetworkId;
            }

            if (this.TargetSubnetId != null)
            {
                // TargetSubnet
                if (vTargetSubnet == null)
                {
                    vTargetSubnet = new SubResource();
                }
                vTargetSubnet.Id = this.TargetSubnetId;
            }

            var vTopologyParameters = new TopologyParameters
            {
                TargetResourceGroupName = this.TargetResourceGroupName,
                TargetVirtualNetwork = vTargetVirtualNetwork,
                TargetSubnet = vTargetSubnet,
            };

            if (string.Equals(this.ParameterSetName, "SetByResource", StringComparison.OrdinalIgnoreCase))
            {
                ResourceGroupName = this.NetworkWatcher.ResourceGroupName;
                NetworkWatcherName = this.NetworkWatcher.Name;
            }
            var vNetworkWatcherResult = this.NetworkClient.NetworkManagementClient.NetworkWatchers.GetTopology(ResourceGroupName, NetworkWatcherName, vTopologyParameters);
            var vNetworkWatcherModel = NetworkResourceManagerProfile.Mapper.Map<CNM.PSTopology>(vNetworkWatcherResult);
            WriteObject(vNetworkWatcherModel);
        }
    }
}
