// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using Microsoft.Azure.Commands.Network.Models;
using Microsoft.Azure.Management.Network.Models;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;

namespace Microsoft.Azure.Commands.Network.Automation
{
    [Cmdlet("Add", "AzureRmVirtualNetworkPeering", SupportsShouldProcess = true)]
    [OutputType(typeof(VirtualNetwork))]
    public class AddAzureRmVirtualNetworkPeeringCommand : NetworkBaseCmdlet
    {
        [Parameter(
            Mandatory = true,
            Position = 0,
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        public PSVirtualNetwork VirtualNetwork { get; set; }

        [Parameter(
            Mandatory = false,
            Position = 2,
            ValueFromPipelineByPropertyName = true)]
        public bool? AllowVirtualNetworkAccess { get; set; }

        [Parameter(
            Mandatory = false,
            Position = 3,
            ValueFromPipelineByPropertyName = true)]
        public bool? AllowForwardedTraffic { get; set; }

        [Parameter(
            Mandatory = false,
            Position = 4,
            ValueFromPipelineByPropertyName = true)]
        public bool? AllowGatewayTransit { get; set; }

        [Parameter(
            Mandatory = false,
            Position = 5,
            ValueFromPipelineByPropertyName = true)]
        public bool? UseRemoteGateway { get; set; }

        [Parameter(
            Mandatory = false,
            Position = 1,
            ValueFromPipelineByPropertyName = true)]
        public string Name { get; set; }

        [Parameter(
            Mandatory = false,
            Position = 6,
            ValueFromPipelineByPropertyName = true)]
        public string RemoteVirtualNetworkId { get; set; }

        public override void Execute()
        {

            // VirtualNetworkPeerings
            if (this.VirtualNetwork.VirtualNetworkPeerings == null)
            {
                this.VirtualNetwork.VirtualNetworkPeerings = new List<PSVirtualNetworkPeering>();
            }

            var vVirtualNetworkPeerings = new PSVirtualNetworkPeering();

            vVirtualNetworkPeerings.AllowVirtualNetworkAccess = this.AllowVirtualNetworkAccess;
            vVirtualNetworkPeerings.AllowForwardedTraffic = this.AllowForwardedTraffic;
            vVirtualNetworkPeerings.AllowGatewayTransit = this.AllowGatewayTransit;
            vVirtualNetworkPeerings.UseRemoteGateways = this.UseRemoteGateway;
            vVirtualNetworkPeerings.Name = this.Name;
            if (!string.IsNullOrEmpty(this.RemoteVirtualNetworkId))
            {
                // RemoteVirtualNetwork
                vVirtualNetworkPeerings.RemoteVirtualNetwork = new PSResourceId();
                vVirtualNetworkPeerings.RemoteVirtualNetwork.Id = this.RemoteVirtualNetworkId;
            }
            this.VirtualNetwork.VirtualNetworkPeerings.Add(vVirtualNetworkPeerings);
            WriteObject(this.VirtualNetwork);
        }
    }
}

